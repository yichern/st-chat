{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["withStreamlitConnection","props","useEffect","Streamlit","setFrameHeight","avatarUrl","args","isUser","avatarStyle","seed","animateFrom","value","useTypewriter","startsWith","theme","Avatar","styled","img","border","height","width","margin","MessageContainer","div","display","background","secondaryBackgroundColor","borderRadius","padding","maxWidth","whiteSpace","ChatContainer","fontFamily","font","css","src","alt","draggable","options","delay","cursor","onCreateTextNode","character","document","createTextNode","onInit","typewriter","pasteString","typeString","split","join","callFunction","state","setTimeout","elements","setAttribute","stop","start","ReactDOM","render","StrictMode","getElementById"],"mappings":"iRAuIeA,eAtHF,SAACC,GACZC,qBAAU,kBAAMC,IAAUC,oBAC1B,IAEIC,EAFJ,EAAyEJ,EAAMK,KAAvEC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,YAAaC,EAAhD,EAAgDA,MAAOC,EAAvD,EAAuDA,cAIrDP,EADEG,EAAYK,WAAW,UAEhBL,EAAYK,WAAW,cADpBL,EAIH,2CAAuCA,EAAvC,YAAsDC,EAAtD,QAMX,IAAQK,EAAUb,EAAVa,MAGR,IAAKA,EACH,OAAO,oFAIT,IAAMC,EAASC,IAAOC,IAAI,CACxBC,OAAO,wBAEPC,OAAQ,OACRC,MAAO,OACPC,OAAQ,IAIJC,EAAmBN,IAAOO,IAAI,CAClCC,QAAS,eACTC,WAAYX,EAAMY,yBAClBR,OAAQ,wBACRS,aAAc,OACdC,QAAS,YACTP,OAAQ,WACRQ,SAAU,MACVC,WAAY,aAIRC,EAAgBf,IAAOO,IAAI,CAC/BC,QAAS,OAETQ,WAAW,GAAD,OAAKlB,EAAMmB,KAAX,sCACVd,OAAQ,OACRE,OAAQ,EACRD,MAAO,SAET,SAACnB,GACC,OAAIA,EAAMM,OACD2B,YAAP,iKAQKA,YAAP,6BASF,OAAK3B,GAAUK,EAEX,kBAACmB,EAAD,CAAexB,OAAQA,GACrB,kBAACQ,EAAD,CAAQoB,IAAK9B,EAAW+B,IAAI,UAAUC,UAAU,UAChD,kBAACf,EAAD,KACE,kBAAC,IAAD,CACEgB,QAAS,CACPC,MAAO,GACPC,OAAQ,SACRC,iBAd0B,SAACC,GAErC,OADAvC,IAAUC,iBACHuC,SAASC,eAAeF,KAcvBG,OAAQ,SAAAC,GACNA,EACGC,YAAYrC,EAAa,MACzBsC,WACCrC,EAAMsC,MAAMvC,GAAawC,KAAK,KAE/BC,cAAa,SAAAC,GACZC,YAAW,kBAAMD,EAAME,SAASd,OAAOe,aAAa,SAAU,YAAW,MACzET,EAAWU,UAEZC,aAiBX,kBAAC1B,EAAD,CAAexB,OAAQA,GACrB,kBAACQ,EAAD,CAAQoB,IAAK9B,EAAW+B,IAAI,UAAUC,UAAU,UAChD,kBAACf,EAAD,KAAmBX,OC7H3B+C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASkB,eAAe,W","file":"static/js/main.034a66d0.chunk.js","sourcesContent":["import {\n  // eslint-disable-next-line \n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ComponentProps, useEffect } from \"react\"\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\nimport Typewriter from 'typewriter-effect'\n\n\n// custom callback to refresh streamlit on every character typed\nconst refreshStreamlitAndCreateNode = (character: string) => {\n  Streamlit.setFrameHeight();\n  return document.createTextNode(character)\n}\n\nconst Chat = (props: ComponentProps<any>) => {\n  useEffect(() => Streamlit.setFrameHeight());\n  const { isUser, avatarStyle, seed, animateFrom, value, useTypewriter } = props.args;\n\n  let avatarUrl\n  if (avatarStyle.startsWith(\"https\")) {\n    avatarUrl = avatarStyle\n  } else if (avatarStyle.startsWith(\"data:image\")) {\n    avatarUrl = avatarStyle\n  } else {\n    avatarUrl = `https://avatars.dicebear.com/api/${avatarStyle}/${seed}.svg`\n  }\n\n  // Streamlit sends us a theme object via props that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n  const { theme } = props\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (!theme) {\n    return <div>Theme is undefined, please check streamlit version.</div>\n  }\n\n  // styles for the avatar image\n  const Avatar = styled.img({\n    border: `1px solid transparent`,\n    // borderRadius: '50%',\n    height: '3rem',\n    width: '3rem',\n    margin: 0,\n  })\n\n  // styles for the message box\n  const MessageContainer = styled.div({\n    display: 'inline-block',\n    background: theme.secondaryBackgroundColor,\n    border: '1px solid transparent',\n    borderRadius: '10px',\n    padding: '10px 14px',\n    margin: '5px 20px',\n    maxWidth: '70%',\n    whiteSpace: 'pre-wrap',\n  })\n\n  // styles for the container\n  const ChatContainer = styled.div({\n    display: 'flex',\n    // flexDirection: 'row',\n    fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`, \n    height: 'auto',\n    margin: 0,\n    width: '100%'\n  }, \n  (props: {isUser: boolean}) => {  // specific styles\n    if (props.isUser){\n      return css`\n        flex-direction: row-reverse;\n        & > div {\n          text-align: right;\n        }\n        padding-right: 5px;\n      `\n    }\n    return css``\n  })\n  \n  // custom callback to refresh streamlit on every character typed\n  const refreshStreamlitAndCreateNode = (character: string) => {\n    Streamlit.setFrameHeight();\n    return document.createTextNode(character)\n  }\n  \n  if (!isUser && useTypewriter) {\n    return (\n      <ChatContainer isUser={isUser}>\n        <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n        <MessageContainer>\n          <Typewriter\n            options={{\n              delay: 10,\n              cursor: 'â–Ž',\n              onCreateTextNode: refreshStreamlitAndCreateNode\n            }}\n            onInit={typewriter => {\n              typewriter\n                .pasteString(animateFrom, null)\n                .typeString(\n                  value.split(animateFrom).join('')\n                )\n                .callFunction(state => {\n                  setTimeout(() => state.elements.cursor.setAttribute('hidden', 'hidden'), 3500);\n                  typewriter.stop();\n                })\n                .start();\n            }}\n          />\n        </MessageContainer>\n      </ChatContainer>\n    )\n  } else if (!isUser && !useTypewriter) {\n    return (\n      <ChatContainer isUser={isUser}>\n        <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n        <MessageContainer>\n          {value}\n        </MessageContainer>\n      </ChatContainer>\n    )\n  } else {\n    return (\n      <ChatContainer isUser={isUser}>\n        <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n        <MessageContainer>{value}</MessageContainer>\n      </ChatContainer>\n    )\n  }\n} \n\nexport default withStreamlitConnection(Chat);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Chat from \"./stChat\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chat />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}