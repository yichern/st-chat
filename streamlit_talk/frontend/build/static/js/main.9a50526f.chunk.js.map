{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["refreshStreamlitAndCreateNode","character","Streamlit","setFrameHeight","document","createTextNode","MessageContainer","props","theme","value","animateFrom","useTypewriter","StyledDiv","styled","div","display","background","secondaryBackgroundColor","border","borderRadius","padding","margin","maxWidth","whiteSpace","console","log","options","delay","cursor","onCreateTextNode","onInit","typewriter","pasteString","typeString","split","join","callFunction","state","setTimeout","elements","setAttribute","stop","start","withStreamlitConnection","useEffect","avatarUrl","args","isUser","avatarStyle","seed","startsWith","Avatar","img","height","width","ChatContainer","fontFamily","font","css","src","alt","draggable","ReactDOM","render","StrictMode","getElementById"],"mappings":"iRAYMA,EAAgC,SAACC,GAErC,OADAC,IAAUC,iBACHC,SAASC,eAAeJ,IAG3BK,EAAmB,SAACC,GACxB,IAAQC,EAA6CD,EAA7CC,MAAOC,EAAsCF,EAAtCE,MAAOC,EAA+BH,EAA/BG,YAAaC,EAAkBJ,EAAlBI,cAC7BC,EAAYC,IAAOC,IAAI,CAC3BC,QAAS,eACTC,WAAYR,EAAMS,yBAClBC,OAAQ,wBACRC,aAAc,OACdC,QAAS,YACTC,OAAQ,WACRC,SAAU,MACVC,WAAY,aAEd,OAAIZ,GACFa,QAAQC,IAAI,6BAEV,kBAACb,EAAD,KACE,kBAAC,IAAD,CACEc,QAAS,CACPC,MAAO,GACPC,OAAQ,SACRC,iBAAkB7B,GAEpB8B,OAAQ,SAAAC,GACNA,EACGC,YAAYtB,EAAa,MACzBuB,WACCxB,EAAMyB,MAAMxB,GAAayB,KAAK,KAE/BC,cAAa,SAAAC,GACZC,YAAW,kBAAMD,EAAME,SAASX,OAAOY,aAAa,SAAU,YAAW,MACzET,EAAWU,UAEZC,aAOT,kBAAC9B,EAAD,KACGH,IAuFMkC,eAjFF,SAACpC,GACZqC,qBAAU,WACN1C,IAAUC,oBAGd,IAEI0C,EAFJ,EAAyEtC,EAAMuC,KAAvEC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,KAAMvC,EAAnC,EAAmCA,YAAaD,EAAhD,EAAgDA,MAAOE,EAAvD,EAAuDA,cAIrDkC,EADEG,EAAYE,WAAW,UAEhBF,EAAYE,WAAW,cADpBF,EAIH,2CAAuCA,EAAvC,YAAsDC,EAAtD,QAMX,IAAQzC,EAAUD,EAAVC,MAGR,IAAKA,EACH,OAAO,oFAIT,IAAM2C,EAAStC,IAAOuC,IAAI,CACxBlC,OAAO,wBAEPmC,OAAQ,OACRC,MAAO,OACPjC,OAAQ,IAIJkC,EAAgB1C,IAAOC,IAAI,CAC/BC,QAAS,OAETyC,WAAW,GAAD,OAAKhD,EAAMiD,KAAX,sCACVJ,OAAQ,OACRhC,OAAQ,EACRiC,MAAO,SAET,SAAC/C,GACC,OAAIA,EAAMwC,OACDW,YAAP,iKAQKA,YAAP,6BAQF,OAAKX,EAUD,kBAACQ,EAAD,CAAeR,OAAQA,GACrB,kBAACI,EAAD,CAAQQ,IAAKd,EAAWe,IAAI,UAAUC,UAAU,UAChD,kBAAC,EAAD,CAAkBrD,MAAOA,EAAOC,MAAOA,EAAOC,YAAaA,KAV7D,kBAAC6C,EAAD,CAAeR,OAAQA,GACrB,kBAACI,EAAD,CAAQQ,IAAKd,EAAWe,IAAI,UAAUC,UAAU,UAChD,kBAAC,EAAD,CAAkBrD,MAAOA,EAAOC,MAAOA,EAAOC,YAAaA,EAAaC,cAAeA,QC7H/FmD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5D,SAAS6D,eAAe,W","file":"static/js/main.9a50526f.chunk.js","sourcesContent":["import {\n  // eslint-disable-next-line \n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ComponentProps, useEffect, useState } from \"react\"\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\nimport Typewriter from 'typewriter-effect'\n\n\n// custom callback to refresh streamlit on every character typed\nconst refreshStreamlitAndCreateNode = (character: string) => {\n  Streamlit.setFrameHeight();\n  return document.createTextNode(character)\n}\n\nconst MessageContainer = (props: ComponentProps<any>) => {\n  const { theme, value, animateFrom, useTypewriter } = props\n  const StyledDiv = styled.div({\n    display: 'inline-block',\n    background: theme.secondaryBackgroundColor,\n    border: '1px solid transparent',\n    borderRadius: '10px',\n    padding: '10px 14px',\n    margin: '5px 20px',\n    maxWidth: '70%',\n    whiteSpace: 'pre-wrap',\n  })\n  if (useTypewriter) {\n    console.log(\"rendering with typewriter\")\n    return (\n      <StyledDiv>\n        <Typewriter\n          options={{\n            delay: 10,\n            cursor: 'â–Ž',\n            onCreateTextNode: refreshStreamlitAndCreateNode\n          }}\n          onInit={typewriter => {\n            typewriter\n              .pasteString(animateFrom, null)\n              .typeString(\n                value.split(animateFrom).join('')\n              )\n              .callFunction(state => {\n                setTimeout(() => state.elements.cursor.setAttribute('hidden', 'hidden'), 3500)\n                typewriter.stop()\n              })\n              .start()\n          }}\n        />\n      </StyledDiv>\n    )\n  } else {\n    return (\n      <StyledDiv>\n        {value}\n      </StyledDiv>\n    )\n  }\n}\n\nconst Chat = (props: ComponentProps<any>) => {\n  useEffect(() => {\n      Streamlit.setFrameHeight()\n    }\n  );\n  const { isUser, avatarStyle, seed, animateFrom, value, useTypewriter } = props.args\n\n  let avatarUrl\n  if (avatarStyle.startsWith(\"https\")) {\n    avatarUrl = avatarStyle\n  } else if (avatarStyle.startsWith(\"data:image\")) {\n    avatarUrl = avatarStyle\n  } else {\n    avatarUrl = `https://avatars.dicebear.com/api/${avatarStyle}/${seed}.svg`\n  }\n\n  // Streamlit sends us a theme object via props that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n  const { theme } = props\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (!theme) {\n    return <div>Theme is undefined, please check streamlit version.</div>\n  }\n\n  // styles for the avatar image\n  const Avatar = styled.img({\n    border: `1px solid transparent`,\n    // borderRadius: '50%',\n    height: '3rem',\n    width: '3rem',\n    margin: 0,\n  })\n\n  // styles for the container\n  const ChatContainer = styled.div({\n    display: 'flex',\n    // flexDirection: 'row',\n    fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`, \n    height: 'auto',\n    margin: 0,\n    width: '100%'\n  }, \n  (props: {isUser: boolean}) => {  // specific styles\n    if (props.isUser){\n      return css`\n        flex-direction: row-reverse;\n        & > div {\n          text-align: right;\n        }\n        padding-right: 5px;\n      `\n    }\n    return css``\n  })\n  \n  // custom callback to refresh streamlit on every character typed\n  const refreshStreamlitAndCreateNode = (character: string) => {\n    Streamlit.setFrameHeight()\n    return document.createTextNode(character)\n  }\n  if (!isUser) {\n    return (\n      <ChatContainer isUser={isUser}>\n        <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n        <MessageContainer theme={theme} value={value} animateFrom={animateFrom} useTypewriter={useTypewriter}>\n        </MessageContainer>\n      </ChatContainer>\n    )\n  } else {\n    return (\n      <ChatContainer isUser={isUser}>\n        <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n        <MessageContainer theme={theme} value={value} animateFrom={animateFrom}>\n        </MessageContainer>\n      </ChatContainer>\n    )\n  }\n} \n\nexport default withStreamlitConnection(Chat);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Chat from \"./stChat\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chat />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}